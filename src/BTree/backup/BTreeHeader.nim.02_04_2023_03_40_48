import std/math
#import std/os
import strutils
import std/streams
import std/times
import BTreeLogs

#const BT_LOG_FILE* = "btree.log"
const BT_ROOT    * = 1
const BT_NODE    * = 2
const BT_LEAF    * = 3

var BT_DEGREE*   = 3                    #Degree of a BTree
let BT_MAXKEYS * = BT_DEGREE - 1        #Max no. of keys a btree node can handle
let BT_MAXCHLD * = BT_DEGREE            #Max no. of children. It should be BT_DEGREE
var BT_MINCHLD * = ceil(BT_DEGREE / 2)  #Min no. of childrens for a non-root and non-leaf node.
                                        #It should be ceil[m/2] where m is the degree/order

var   BT_PREFIX  * = "BTN"
var   BT_SUFFIX  * = 1
###################################################
# Linked List Node with lesser and greater pointer
# lesser and greater points to BTreeNode 
# pointer keyword is equivalent to void* in C or C++
###################################################
type #{ A Linked List Node data structure
  ListNode* = object
    key    *: int
    next   *: ref ListNode
    prev   *: ref ListNode
    lesser *: pointer
    greater*: pointer
#}

type #{ A BTree Node data structure
  BTreeNode* = object

    # type of tree node
    # 1 = root 
    # 2 = Non-Leaf and Non-Root
    # 3 = leaf

    bt_id            *: string 
    bt_level         *: int 
    bt_type          *: int 
    bt_numkeys       *: int #No. of keys present in the current Btree node
    bt_listhead      *: ref ListNode #Start node of keylist
    bt_listtail      *: ref ListNode #tail node of keylist
    bt_cnum          *: int #No. of children present in this node
    bt_parent        *: ref BTreeNode
#}

type
  SearchResult* = object
    node      *: ref BTreeNode
    key       *: ref ListNode

# Global variables
var btroot*:ref BTreeNode = nil
var btarray*:seq[ref BTreeNode]
