import std/math
#import std/os
import strutils

proc printf*(formatstr: cstring) {.importc: "printf", varargs, header: "<stdio.h>".}
proc log*(formatstr: cstring) {.importc: "printf", varargs, header: "<stdio.h>".}

var BT_DEGREE*   = 4                    #Degree of a BTree
let BT_MAXKEYS * = BT_DEGREE - 1        #Max no. of keys a btree node can handle
let BT_MAXCHLD * = BT_DEGREE            #Max no. of children. It should be BT_DEGREE
let BT_MINCHLD * = ceil(BT_DEGREE / 2)  #Min no. of childrens for a non-root and non-leaf node.
                                        #It should be ceil[m/2] where m is the degree/order
const BT_ROOT    * = 1
const BT_NODE    * = 2
const BT_LEAF    * = 3

var   BT_PREFIX    = "BTN"
var   BT_SUFFIX    = 1
###################################################
# Linked List Node with lesser and greater pointer
# lesser and greater points to BTreeNode 
# pointer keyword is equivalent to void* in C or C++
###################################################
type #{ A Linked List Node data structure
  ListNode* = object
    key    *: int
    next   *: ref ListNode
    prev   *: ref ListNode
    lesser *: pointer
    greater*: pointer
#}

type #{ A BTree Node data structure
  BTreeNode* = object

    # type of tree node
    # 1 = root 
    # 2 = Non-Leaf and Non-Root
    # 3 = leaf

    bt_id            *: string 
    bt_level         *: int 
    bt_type          *: int 
    bt_knum          *: int #No. of keys present in the current Btree node
    bt_keylist       *: ref ListNode #List of keys this btreenode contains
    bt_listhead      *: ref ListNode #Start node of keylist
    bt_listtail      *: ref ListNode #tail node of keylist
    bt_cnum          *: int #No. of children present in this node
    bt_parent        *: ref BTreeNode
    bt_parentKey     *: int
    bt_parentKeyNode *: ref ListNode 
#}

type
  SearchResult* = object
    node      *: ref BTreeNode
    key       *: ref ListNode

var btroot*:ref BTreeNode = nil


proc getid*(): string =
#{
   var idstr: string = BT_PREFIX
   var ids = BT_SUFFIX
   idstr.add("[")
   idstr.add(intToStr(ids))
   idstr.add("]")
   BT_SUFFIX = BT_SUFFIX + 1
   return idstr
#}

proc getAddress(root: ref BTreeNode): int64 =
#{
   #var v  = cast[int64](unsafeAddr(root[]))
   var v2 = cast[int64](cast[pointer](root))
   #stdout.write(" BTreeNode         = 0x" & v2.toHex & "\n")
   #echo " BTreeNode         = 0x",v.toHex
   #echo root.repr
   
   return v2
#}

proc getAddressHex(root: ref BTreeNode): cstring =
#{
   #var v  = cast[int64](unsafeAddr(root[]))
   #var v2 = cast[int64](cast[pointer](root))
   var v2 = getAddress(root)
   #stdout.write(" BTreeNode         = 0x" & v2.toHex & "\n")
   #echo " BTreeNode         = 0x",v.toHex
   #echo root.repr
   var  str =  "0x"
   str.add(v2.toHex)
   var outstr:cstring = str.cstring
   return outstr
   #return "0x" & v2.toHex
#}



proc getAddress(head: ref ListNode): int64 =
#{
   #var v  = cast[int64](unsafeAddr(head[]))
   var v2 = cast[int64](cast[pointer](head))
   return v2
#}

proc getAddressHex(head: ref ListNode): cstring =
#{
   #var v  = cast[int64](unsafeAddr(head[]))
   var v2 = cast[int64](cast[pointer](head))
   #var outstr = cast[cstring]( "0x" & v2.toHex)
   var  str =  "0x"
   str.add(v2.toHex)
   var outstr:cstring = str.cstring
   return outstr
   #return "0x" & v2.toHex
#}

proc printList*(head: ref ListNode): void =
#{
   stdout.write("BTreeNode KeyList :[ ")
   var node = head
   while (node != nil):
     stdout.write(node.key," ")
     node = node.next
   stdout.write("]\n")
#}

proc printListAddress*(head: ref ListNode): void =
#{
   printf("BTreeNode KeyList :\n[ ")
   var node = head
   while (node != nil):
     printf("%18d ", node.key)
     node = node.next
   printf("]\n")

   node = head
   printf("[ ")
   while (node != nil):
     var str = getAddressHex(node)
     printf("%4s ", str)
     node = node.next
   printf("]\n")

   # To print next address
   node = head
   printf("[ ")
   while (node != nil):
     var str = getAddressHex(node.next)
     printf("%4s ", str)
     node = node.next
   printf("]\n")

   # To print prev address
   node = head
   printf("[ ")
   while (node != nil):
     var str = getAddressHex(node.prev)
     printf("%4s ", str)
     node = node.next
   printf("]\n")
#}

proc printList*(root: ref BTreeNode): void =
#{
   var node = root.bt_listhead
   #stdout.write("BTreeNode[" & $root.bt_kstart & "] KeyList :[ ")
   printf("BTreeNode[%d] KeyList  :[ ", node.key)
   while (node != nil):
     stdout.write(node.key," ")
     node = node.next
   stdout.write("]\n")
#}

proc printInput*(datalist: seq[int]): void=
#{
   for idx, i in datalist: #{
     if (idx == low(datalist)):
       stdout.write("Input   string        :[ ")

     stdout.write(i)
     stdout.write(" ")

     if (idx == high(datalist)):
       stdout.write("]\n")
   #}
#}

proc newListNode*(key: int): ref ListNode =
#{
   var obj     = new ListNode
   obj.key     = key
   obj.next    = nil
   obj.prev    = nil
   obj.lesser  = nil
   obj.greater = nil
   return obj
#}

proc newBTreeNode*(key: int): ref BTreeNode =
#{
   var lnode         = newListNode(key)
   var bnode         = new BTreeNode
   #bnode.bt_kstart   = key
   #bnode.bt_kend     = key
   bnode.bt_id       = getid()
   printf("BTreeNode Created with ID %s\n", (bnode.bt_id));
   bnode.bt_listhead = lnode
   bnode.bt_listtail = lnode
   bnode.bt_keylist  = lnode
   bnode.bt_type     = BT_LEAF
   bnode.bt_knum     = 1
   bnode.bt_cnum     = 1
   return bnode
#}

proc newBTreeNode*(node: ref ListNode): ref BTreeNode =
#{
   var lnode           = node
   var bnode           = new BTreeNode
   #bnode.bt_kstart    = key
   #bnode.bt_kend      = key
   bnode.bt_id         = getid()
   printf("BTreeNode Created with ID [%s]\n", bnode.bt_id);
   bnode.bt_listhead   = lnode
   bnode.bt_keylist    = lnode
   bnode.bt_type       = BT_LEAF
   bnode.bt_knum       = 0
   bnode.bt_cnum       = 0
   
   while(lnode != nil):
     bnode.bt_knum     = bnode.bt_knum + 1
     bnode.bt_listtail = lnode
     lnode = lnode.next
   
   return bnode
#}

proc getMiddleNode*(head: ref ListNode): ref ListNode =
#{
   var slow = head
   var fast = head

   while (fast != nil and fast.next != nil): #{
     slow = slow.next
     fast = fast.next.next
   #}  
   return slow
#}
proc getMiddle*(head: ref ListNode): ref ListNode =
#{
   return getMiddleNode(head)
#}

proc printListNode*(head: ref ListNode): void =
#{
   var key = head.key
   var keyaddr = getAddress(head)
   echo "Key = ",key," Address = ",keyaddr
#}

proc printListNode*(head: ref ListNode, mark: string): void =
#{
   var key = head.key
   var keyaddr = getAddress(head)
   echo "[",mark,"]Key = ",key," Address = ",keyaddr.toHex
#}

proc getMiddleNode(root: ref BTreeNode): ref ListNode =
#{
   var slow = root.bt_listhead
   var fast = root.bt_listhead

   while (fast != nil and fast.next != nil): #{
     #printListNode(slow, "SLOW")
     #printListNode(fast, "FAST")
     slow = slow.next
     fast = fast.next.next
   #}  
   return slow
#}

proc printBTreeNode*(root: ref BTreeNode): void =
#{
   var middle = getMiddleNode(root)
   echo "[<--------- BTreeNode Begin ---------->"
   printf(" BTreeNode             = %s\n", getAddressHex(root) )
   printf(" BTreeNode.ID          = %s\n",  root.bt_id)
   if (root.bt_type == BT_ROOT): #{
     printf(" BTreeNode.type        = ROOT\n")
   elif (root.bt_type == BT_NODE):
     printf(" BTreeNode.type        = INTERNAL_NODE\n")
   else:
     printf(" BTreeNode.type        = LEAF\n")
   #}
   
   printf(" BTreeNode.head        = %d\n", root.bt_listhead.key)
   printf(" BTreeNode.head        = %s\n", getAddressHex(root.bt_listhead))
   printf(" BTreeNode.tail        = %d\n", root.bt_listtail.key)
   printf(" BTreeNode.tail        = %s\n", getAddressHex(root.bt_listtail))
   printf(" BTreeNode.cnum        = %d\n", root.bt_cnum)
   printf(" BTreeNode.knum        = %d\n", root.bt_knum)
   printf(" BTreeNode.middleKey   = %d\n", middle.key)
   printf(" BTreeNode.middleNode  = %s\n", getAddressHex(middle))
   printf(" BTreeNode.parent      = %s\n", getAddressHex(root.bt_parent))
   printf(" BTreeNode.keyList     = [ ")
   var node = root.bt_listhead
   while (node != nil):
     printf("%d ",node.key)
     node = node.next
   stdout.write("]\n")
   echo "]<--------- BTreeNode   End ---------->"
#}

proc getLeft*(node: ref ListNode): ref BTreeNode =
#{
   var left = cast[ref BTreeNode](node.lesser)
   return left
#}

proc getLeft*(root: ref BTreeNode): ref BTreeNode =
#{
   var left = cast[ref BTreeNode](root.bt_listhead.lesser)
   return left
#}

proc getRight*(node: ref ListNode): ref BTreeNode =
#{
   var right = cast[ref BTreeNode](node.greater)
   return right
#}

proc getRight*(root: ref BTreeNode): ref BTreeNode =
#{
   var right = cast[ref BTreeNode](root.bt_listtail.greater)
   return right
#}

proc adjust*(root: var ref BTreeNode): void =
#{
   var head = root.bt_keylist
   root.bt_knum = 0 
   root.bt_cnum = 0 

   while(head != nil): #{
     root.bt_knum = root.bt_knum + 1 

     if (head.lesser != nil):
       root.bt_cnum = root.bt_cnum + 1 

     if (head.greater != nil):
       root.bt_cnum = root.bt_cnum + 1 

     root.bt_listtail = head
     head = head.next
   #}  
#}

proc setLeft*(node: var ref ListNode, left: var ref BTreeNode): void =
#{
   #var leftp = cast[ref BTreeNode](node.lesser)
   #leftp = left
   node.lesser = cast[pointer](left)
#}

proc setLeft*(root: var ref BTreeNode, left: ref BTreeNode): void =
#{
   #var leftp = cast[ref BTreeNode](root.bt_listhead.lesser)
   #leftp = left
   root.bt_listhead.lesser = cast[pointer](left)
   root.bt_knum = root.bt_knum + 1
#}


proc setRight*(node: var ref ListNode, right: var ref BTreeNode): void =
#{
   #var rightp = cast[ref BTreeNode](node.greater)
   #rightp = right
   node.greater = cast[pointer](right)
#}

proc setRight*(root: var ref BTreeNode, right: ref BTreeNode): void =
#{
   #var rightp = cast[ref BTreeNode](root.bt_listtail.greater)
   #rightp = right
   root.bt_listtail.greater = cast[pointer](right)
   root.bt_knum = root.bt_knum + 1
#}
