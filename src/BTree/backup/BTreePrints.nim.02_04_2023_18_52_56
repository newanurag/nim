import std/math
#import std/os
import strutils
import BTreeLogs
import BTreeHeader
import BTreeUtils

proc getid*(): string =
#{
   var idstr: string = BT_PREFIX
   var ids = BT_SUFFIX
   idstr.add("[")
   idstr.add(intToStr(ids))
   idstr.add("]")
   BT_SUFFIX = BT_SUFFIX + 1
   return idstr
#}

proc printList*(head: ref ListNode): void =
#{
   stdout.write("BTreeNode KeyList :[ ")
   var node = head
   while (node != nil):
     stdout.write(node.key," ")
     node = node.next
   stdout.write("]\n")
#}

proc printListAddress*(head: ref ListNode): void =
#{
   log("BTreeNode KeyList :\n[ ")
   var node = head
   while (node != nil):
     log("%18d ", node.key)
     node = node.next
   log("]\n")

   node = head
   log("[ ")
   while (node != nil):
     var str = getAddressHex(node)
     log("%4s ", str)
     node = node.next
   log("]\n")

   # To print next address
   node = head
   log("[ ")
   while (node != nil):
     var str = getAddressHex(node.next)
     log("%4s ", str)
     node = node.next
   log("]\n")

   # To print prev address
   node = head
   log("[ ")
   while (node != nil):
     var str = getAddressHex(node.prev)
     log("%4s ", str)
     node = node.next
   log("]\n")
#}

proc printListAddressF*(head: ref ListNode): void =
#{
   logf("BTreeNode KeyList :\n[ ")
   var node = head
   while (node != nil):
     logf("%18d ", node.key)
     node = node.next
   logf("]\n")

   node = head
   logf("[ ")
   while (node != nil):
     var str = getAddressHex(node)
     logf("%4s ", str)
     node = node.next
   logf("]\n")

   # To print next address
   node = head
   logf("[ ")
   while (node != nil):
     var str = getAddressHex(node.next)
     logf("%4s ", str)
     node = node.next
   logf("]\n")

   # To print prev address
   node = head
   logf("[ ")
   while (node != nil):
     var str = getAddressHex(node.prev)
     logf("%4s ", str)
     node = node.next
   logf("]\n")
#}

proc printList*(root: ref BTreeNode): void =
#{
   var node = root.bt_listhead
   #stdout.write("BTreeNode[" & $root.bt_kstart & "] KeyList :[ ")
   log("BTreeNode[%d] KeyList  :[ ", node.key)
   while (node != nil):
     stdout.write(node.key," ")
     node = node.next
   stdout.write("]\n")
#}

proc printInput*(datalist: seq[int]): void=
#{
   var str:string
   for idx, i in datalist: #{
     if (idx == low(datalist)):
       str.add("Input   string  :[ ")
     str.add("" & $i)
     str.add(" ")

     if (idx == high(datalist)):
       str.add("]")
   #}
   log(str)
   logf(str)
#}

proc printInputF*(datalist: seq[int]): void=
#{
   var str:string
   for idx, i in datalist: #{
     if (idx == low(datalist)):
       str.add("Input   string  :[ ")
     str.add("" & $i)
     str.add(" ")

     if (idx == high(datalist)):
       str.add("]")
   #}
   logf(str)
#}

proc printListNode*(head: ref ListNode): void =
#{
   var key = head.key
   var keyaddr = getAddress(head)
   echo "Key = ",key," Address = ",keyaddr
#}

proc printListNodeF*(head: ref ListNode): void =
#{
   var key = head.key
   var keyaddr = getAddress(head)
   logf("Key = %d, Address = ", key, keyaddr)
#}

proc printListNode*(head: ref ListNode, mark: string): void =
#{
   var key = head.key
   var keyaddr = getAddress(head)
   echo "[",mark,"]Key = ",key," Address = ",keyaddr.toHex
#}

proc printBTreeNode*(root: ref BTreeNode): void =
#{
   if (root == nil):
     return
   var middle = getMiddleNode(root)
   echo "[<--------- BTreeNode Begin ---------->"
   log(" BTreeNode                     = %s\n", getAddressHex(root) )
   log(" BTreeNode.ID                  = %s\n",  root.bt_id)
   if (root.bt_type == BT_ROOT): #{
     log(" BTreeNode.type                = ROOT\n")
   elif (root.bt_type == BT_NODE):
     log(" BTreeNode.type                = INTERNAL_NODE\n")
   else:
     log(" BTreeNode.type                = LEAF\n")
   #}
   
   log(" BTreeNode.degree              = %d\n", BT_DEGREE)
   log(" BTreeNode.order               = %d\n", BT_DEGREE)
   var minchld:float
   minchld = cast[int](BT_DEGREE) / 2
   log(" BTreeNode.head                = %d\n", root.bt_listhead.key)
   log(" BTreeNode.head                = %s\n", getAddressHex(root.bt_listhead))
   log(" BTreeNode.tail                = %d\n", root.bt_listtail.key)
   log(" BTreeNode.tail                = %s\n", getAddressHex(root.bt_listtail))
   log(" BTreeNode.cnum(No. of childs) = %d\n", root.bt_cnum)
   log(" BTreeNode.maxchild            = %d\n", BT_MAXCHLD)
   stdout.write(" BTreeNode.minchild            = " & $minchld & "\n")
   log(" BTreeNode.knum(No. of keys)   = %d\n", root.bt_numkeys)
   log(" BTreeNode.maxkeys             = %d\n", BT_MAXKEYS)
   log(" BTreeNode.middleKey           = %d\n", middle.key)
   log(" BTreeNode.middleNode          = %s\n", getAddressHex(middle))
   log(" BTreeNode.parent              = %s\n", getAddressHex(root.bt_parent))
   if (root.bt_parent != nil):
     log(" BTreeNode.parent              = %s, KEY = %d\n",
     root.bt_parent.bt_id, root.bt_parent.bt_listhead.key)
   log(" BTreeNode.keyList             = [ ")
   var node = root.bt_listhead
   while (node != nil):
     log("%d ",node.key)
     node = node.next
   stdout.write("]\n")
   echo "]<--------- BTreeNode   End ---------->"
#}

proc printBTreeNodeF*(root: ref BTreeNode): void =
#{
   if (root == nil):
     return
   var middle = getMiddleNode(root)
   logf("[<--------- BTreeNode Begin ---------->")
   logf(" BTreeNode                     = %s", getAddressHex(root) )
   logf(" BTreeNode.ID                  = %s",  root.bt_id)
   if (root.bt_type == BT_ROOT): #{
     logf(" BTreeNode.type                = ROOT")
   elif (root.bt_type == BT_NODE):
     logf(" BTreeNode.type                = INTERNAL_NODE")
   else:
     logf(" BTreeNode.type                = LEAF")
   #}
   
   logf(" BTreeNode.degree              = %d", BT_DEGREE)
   logf(" BTreeNode.order               = %d", BT_DEGREE)
   var minchld:float
   minchld = cast[int](BT_DEGREE) / 2
   logf(" BTreeNode.head                = %d", root.bt_listhead.key)
   logf(" BTreeNode.head                = %s", getAddressHex(root.bt_listhead))
   logf(" BTreeNode.tail                = %d", root.bt_listtail.key)
   logf(" BTreeNode.tail                = %s", getAddressHex(root.bt_listtail))
   logf(" BTreeNode.cnum(No. of childs) = %d", root.bt_cnum)
   logf(" BTreeNode.maxchild            = %d", BT_MAXCHLD)
   #stdout.write(" BTreeNode.minchild          = " & $minchld & "\n")
   logf(" BTreeNode.minchild            = %f", minchld)
   logf(" BTreeNode.knum(No. of keys)   = %d", root.bt_numkeys)
   logf(" BTreeNode.maxkeys             = %d", BT_MAXKEYS)
   logf(" BTreeNode.middleKey           = %d", middle.key)
   logf(" BTreeNode.middleNode          = %s", getAddressHex(middle))
   logf(" BTreeNode.parent              = %s", getAddressHex(root.bt_parent))
   if (root.bt_parent != nil):
     logf(" BTreeNode.parent              = %s, KEY = %d",
     root.bt_parent.bt_id, root.bt_parent.bt_listhead.key)

   var str:string
   str.add(" BTreeNode.keyList             = [ ")
   var node = root.bt_listhead
   while (node != nil):
     str.add("" & $node.key)
     str.add(" ")
     node = node.next
   str.add("]")
   logf(str)
   logf("]<--------- BTreeNode   End ---------->")
#}

proc printBTreeArray*(): void =
#{
   for node in btarray:
     printBTreeNode(node)
   log("Total BTreeNodes  : %d\n", len(btarray))
   logf("Total BTreeNodes  : %d\n", len(btarray))
#}

proc printBTreeArrayF*(): void =
#{
   for node in btarray:
     printBTreeNodeF(node)
   logf("Total BTreeNodes  : %d\n", len(btarray))
#}

proc printBTreeListF*(): void =
#{
   #for node in btlist:
   #  printListNodeF(node)
   logf("Total BTreeLists  : %d\n", len(btlist))
#}
